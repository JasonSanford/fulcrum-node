{"version":3,"sources":["../../src/resources/media-base.js"],"names":["require","MediaResource","file","attributes","attrs","formData","FormData","accessKey","hasOwnProperty","uuid","v4","append","resourceName","fileOptions","filename","fileName","body","headers","options","optionsForUpload","client","api","post","createAction","version","find","media","fetch","then","resp","callback","streamVersion","Resource","List","includeInto","Find","Create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AANA;AACAA,QAAQ,gBAAR;;IAOqBC,a;;;;;;;;;;qCACFC,I,EAAMC,U,EAAY;AACjC,UAAMC,QAAQD,cAAc,EAA5B;AACA,UAAME,WAAW,IAAIC,kBAAJ,EAAjB;;AAEA,UAAMC,YAAYH,MAAMI,cAAN,CAAqB,WAArB,IAAoCJ,MAAMG,SAA1C,GAAsDE,eAAKC,EAAL,EAAxE;;AAEAL,eAASM,MAAT,CAAmB,KAAKC,YAAxB,mBAAoDL,SAApD;;AAEA,UAAIM,cAAc,IAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIT,MAAMI,cAAN,CAAqB,UAArB,CAAJ,EAAsC;AACpCK,sBAAc,EAAEC,UAAUV,MAAMW,QAAlB,EAAd;AACD;;AAEDV,eAASM,MAAT,CAAmB,KAAKC,YAAxB,aAA8CV,IAA9C,EAAoDW,WAApD;;AAEA,aAAO;AACLG,cAAMX,QADD;AAELY,iBAAS;AACP,0BAAgB;AADT;AAFJ,OAAP;AAMD;;;;2GAEYf,I,EAAMC,U;;;;;;AACXe,uB,GAAU,KAAKC,gBAAL,CAAsBjB,IAAtB,EAA4BC,UAA5B,C;;uBAEG,KAAKiB,MAAL,CAAYC,GAAZ,CAAgBC,IAAhB,CAAqB,KAAKC,YAA1B,EAAwCL,OAAxC,C;;;AAAbF,oB;iDAECA,KAAK,KAAKJ,YAAV,C;;;;;;;;;;;;;;;;;;;6GAGWL,S,EAAWiB,O;;;;;;;uBACT,KAAKC,IAAL,CAAUlB,SAAV,C;;;AAAdmB,qB;kDACCC,MAAMD,MAAMF,OAAN,CAAN,EACJI,IADI,CACC;AAAA,yBAAQC,KAAKb,IAAb;AAAA,iBADD,C;;;;;;;;;;;;;;;;;;mCAIMT,S,EAAWuB,Q,EAAU;AAClC,aAAO,KAAKC,aAAL,CAAmBxB,SAAnB,EAA8B,UAA9B,CAAP;AACD;;;EA/CwCyB,c;;kBAAtB/B,a;;;AAkDrBgC,eAAKC,WAAL,CAAiBjC,aAAjB;AACAkC,eAAKD,WAAL,CAAiBjC,aAAjB;AACAmC,iBAAOF,WAAP,CAAmBjC,aAAnB","file":"media-base.js","sourcesContent":["import uuid from 'uuid';\nimport FormData from 'form-data';\n// import fetch from 'isomorphic-fetch';\nrequire('portable-fetch');\n\nimport List from '../actions/list';\nimport Find from '../actions/find';\nimport Create from '../actions/create';\nimport Resource from './base';\n\nexport default class MediaResource extends Resource {\n  optionsForUpload(file, attributes) {\n    const attrs = attributes || {};\n    const formData = new FormData();\n\n    const accessKey = attrs.hasOwnProperty('accessKey') ? attrs.accessKey : uuid.v4();\n\n    formData.append(`${this.resourceName}[access_key]`, accessKey);\n\n    let fileOptions = null;\n\n    // File names from media streams like\n    // fs.createReadStream('photo.jpg')\n    // are automatically added. When reading from buffers like\n    // fs.readFileSync('photo.jpg)\n    // the file name can't be inferred so it must be supplied like\n    // photos.create(fs.readFileSync('photo.jpg'), {fileName: 'photo.jpg'})\n    if (attrs.hasOwnProperty('fileName')) {\n      fileOptions = { filename: attrs.fileName };\n    }\n\n    formData.append(`${this.resourceName}[file]`, file, fileOptions);\n\n    return {\n      body: formData,\n      headers: {\n        'Content-Type': null\n      }\n    };\n  }\n\n  async create(file, attributes) {\n    const options = this.optionsForUpload(file, attributes);\n\n    const body = await this.client.api.post(this.createAction, options);\n\n    return body[this.resourceName];\n  }\n\n  async streamVersion(accessKey, version) {\n    const media = await this.find(accessKey);\n    return fetch(media[version])\n      .then(resp => resp.body);\n  }\n\n  streamOriginal(accessKey, callback) {\n    return this.streamVersion(accessKey, 'original');\n  }\n}\n\nList.includeInto(MediaResource);\nFind.includeInto(MediaResource);\nCreate.includeInto(MediaResource);\n"]}